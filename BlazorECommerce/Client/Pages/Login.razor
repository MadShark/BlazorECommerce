@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="User" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="User.Email" class="form-control"/>
        <ValidationMessage For="@(() => User.Email)" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="User.Password" class="form-control" type="password"/>
        <ValidationMessage For="@(() => User.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="text-danger">
   <span>@ErrorMessage</span>
</div>

@code {
    private UserLoginDTO User = new UserLoginDTO();

    private string ErrorMessage = string.Empty;

    private string returnUrl = string.Empty;


    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(User);
        if (result.Success)
        {
            ErrorMessage = string.Empty;

            await LocalStorage.SetItemAsync("AuthToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
            ErrorMessage = result.Message;
    }
}
