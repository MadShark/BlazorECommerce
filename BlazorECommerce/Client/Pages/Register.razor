@page "/register"
@inject IAuthService AuthService

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model="User" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="User.Email" class="form-control" />
        <ValidationMessage For="@(() => User.Email)" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="User.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => User.Password)" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="User.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(() => User.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
    <br/>
    <div class="@MessageCssClass">
        <span>@Message</span>
    </div>
</EditForm>

@code {
    UserRegisterDTO User = new UserRegisterDTO();

    string Message = string.Empty;

    string MessageCssClass = string.Empty;


    async Task HandleRegistration()
    {
        var result = await AuthService.Register(User);
        Message = result.Message;

        if (result.Success)
            MessageCssClass = "text-success";
        else
            MessageCssClass = "text-danger";
    }
}
