@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (CartProducts == null || CartProducts.Count == 0)
{
    <span>@Message</span>
}
else if (OrderPlaced)
{
    <span>Thank you for your order! You can check it out <a href="orders">here</a>!</span>
}
else
{
    <div>
        @foreach (var product in CartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>

                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>

                    <span>@product.ProductType</span><br/>

                    <input type="number" value="@product.Quantity"
                        @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                        class="form-control input-quantity"
                        min="1" />

                    <button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Delete</button>
                </div>

                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@CartProducts.Count): $@CartProducts.Sum(product => @product.Price * product.Quantity)
        </div>
    </div>
    <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Place Order</button>
}

@code {
    private List<CartProductResponseDTO> CartProducts = null;
    private string Message = "Loading Cart...";
    bool OrderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        OrderPlaced = false;
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int ProductId, int ProductTypeId)
    {
        await CartService.RemoveProductFromCart(ProductId, ProductTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        CartProducts = await CartService.GetCartProducts();

        if (CartProducts == null || CartProducts.Count == 0)
            Message = "Your cart is empty";
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponseDTO product)
    {
        product.Quantity = Convert.ToInt32(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;

        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        OrderPlaced = true;
    }
}
