@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (Loading)
{
    <span>@Message</span>
}
else
{
    if (Product.Editing)
    {
        <h3>Edit "@Product.Title"</h3>
    }
    else if (Product.IsNew)
    {
        <h3>Create a new product</h3>
    }

    <EditForm Model="Product" OnValidSubmit="AddVariant">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for ="title">Title</label>
            <InputText id="title" @bind-Value="Product.Title" class="form-control" />
        </div>
        <div class="mb-0">
            <label for ="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="Product.ImageUrl" class="form-control" />
        </div>
        <div class="mb-0">
            <img src="@Product.ImageUrl" />
        </div>
        <div class="mb-0">
            <label for ="description">Description</label>
            <InputTextArea id="description" @bind-Value="Product.Description" class="form-control" />
        </div>
        <hr/>
        <div class="header">
            <div class="col">Product Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in Product.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
                        @foreach (var productType in ProductTypeService.ProductTypes)
                        {
                            <option value="@productType.Id.ToString()">@productType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform:scale(1.5, 1.5)" disabled="@variant.Deleted"></InputCheckbox>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add Variant
        </button>
        <hr/>
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="Product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.adminCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
                </InputSelect>
        </div>
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="Product.Featured" class="form-check-input" />
            <label for="featured" class="form-check-label">Featured</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="Product.Visible" class="form-check-input" />
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr/>
        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>
    @if (!Product.IsNew)
    {
        <button type="button" class="btn-delete btn-danger float-start" @onclick="DeleteProduct">
            Delete Product
        </button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    Product Product = new Product();
    bool Loading = true;
    string btnText = "";
    string Message = "Loading";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            Product = new Product { IsNew = true };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProductById(Id)).Data;
            if (dbProduct == null)
            {
                Message = $"Product with Id '{Id}' does not exist";
                return;
            }
            Product = dbProduct;
            Product.Editing = true;
            btnText = "Update Product";
        }
        Loading = false;
    }

    void RemoveVariant(int ProductTypeId)
    {
        var variant = Product.Variants.Find(v => v.ProductTypeId == ProductTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            Product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        Product.Variants.Add(new ProductVariant { IsNew = true, ProductId = Product.Id });
    }

    async void AddOrUpdateProduct()
    {
        if (Product.IsNew)
        {
            var result = await ProductService.UpdateProduct(Product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            Product.IsNew = false;
            Product = await ProductService.UpdateProduct(Product);
            NavigationManager.NavigateTo($"admin/product/{Product.Id}", true);
        }
    }

    async Task DeleteProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
        $"Do you really want to delete '{Product.Title}'?");
        await ProductService.DeleteProduct(Product);
        NavigationManager.NavigateTo("admin/products");
    }
}
